plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    // Adds 'test' task
    id 'java'
}

group 'org.sustain.census'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.11

// updating the version in our release process.
def grpcVersion = '1.28.1' // CURRENT_GRPC_VERSION
def nettyTcNativeVersion = '2.0.30.Final'
def protocVersion = '3.11.0'

dependencies {
    implementation "com.google.protobuf:protobuf-java-util:${protocVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation 'org.json:json:20171018'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8'
    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.5'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    implementation 'org.scala-lang:scala-library:2.12.10'
    implementation "org.apache.spark:spark-core_2.12:3.0.1"
    implementation "org.apache.spark:spark-sql_2.12:3.0.1"
    implementation 'org.apache.spark:spark-mllib_2.12:3.0.1'
    implementation 'org.mongodb.spark:mongo-spark-connector_2.12:3.0.1'

    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    runtimeOnly "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    testCompile "io.grpc:grpc-testing:${grpcVersion}"
    testCompile "org.mockito:mockito-core:1.9.5"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into file("$buildDir/libs")
}

build.dependsOn copyDependencies

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform Gradle about source/test code directories, including generated code.
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated/source/proto/main/grpc', 'build/generated/source/proto/main/java']
        }
    }

    test {
        java {
            srcDir 'src/test/java/org/sustain/server'
        }
    }
}

// Configure Gradle's test task
test {
    // Use JUnit 5 for testing
    useJUnitPlatform()

    // Show standard out/error from tests
    testLogging {
        showStandardStreams = true
    }

    systemProperties(System.getProperties())
}


startScripts.enabled = false

task sustainServer(type: CreateStartScripts) {
    mainClassName = 'org.sustain.server.SustainServer'
    applicationName = 'sustain-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task gboost(type: CreateStartScripts) {
    mainClassName = 'org.sustain.modeling.GBoostRegressionModel'
    applicationName = 'gboost'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task rforest(type: CreateStartScripts) {
    mainClassName = 'org.sustain.modeling.RFRegressionModel'
    applicationName = 'rforest'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

// Distribute generated binaries from above tasks into the bin/ folder
applicationDistribution.into('bin') {
    from(sustainServer)
    from(rforest)
    from(gboost)
    fileMode = 0755 // Make generated binaries executable
}
